#!/bin/bash

#@AUTHORS:
#Jsp7075 (Jeremy Peters)
#rjw9659 (Randall Weber)
#jmm5458 (Julian M Mato-Hernandez)
#
#SUMMARY:
#Summary should go here
#


#----GLOBALS----#
#Directory path for use with launching programs
DIRECTORY=$(pwd)

#ifstat collection interval
ISIN=1

#Ip address for APM Calls
IP=127.0.0.1
#---------------#


#----FUNCTIONS----#
#NAME:
#ifstat_Killer
#
#DESC:
#Checks to see if ifstat is already running, and if so kills it
#
#ARGUMENTS:
# N/A
#
ifstat_killer(){
    pkill -f "ifstat"
}

#NAME:
#prs_spawner
#
#DESC:
#Starts all of the APM exes
#
#ARGUMENTS:
# N/A
#
prs_spawner(){
    $DIRECTORY/APM1 "$IP" 2>&1 &
    $DIRECTORY/APM2 "$IP" 2>&1 &
    $DIRECTORY/APM3 "$IP" 2>&1 &
    $DIRECTORY/APM4 "$IP" 2>&1 &
    $DIRECTORY/APM5 "$IP" 2>&1 &
    $DIRECTORY/APM6 "$IP" 2>&1 &
}

#NAME:
#prs_killer
#
#DESC:
#kills all APM processes
#
#ARGUMENTS:
# N/A
#
prs_killer(){
    pkill -f APM1
    pkill -f APM2
    pkill -f APM3
    pkill -f APM4
    pkill -f APM5
    pkill -f APM6
}

#NAME:
#prs_metrics
#
#DESC:
#Logs metrics for a given process name
#
#ARGUMENTS:
#$1=Process Name
prs_metrics(){
    TMP1=$(ps -aux | grep "$1")
    readarray -t TMP2 <<<"$TMP1"
    TMP1=$(echo ${TMP2[0]} | awk {'print "%"$3",","%"$4'})
    echo $2 "," $TMP1 >> "$1_metrics.csv"
}


# ----------------------------

get_rx(){
	activeInter=$(ip addr | awk '/state UP/ {print $2}')
	activeInter=${activeInter%:*}
	TMP1=$(ifstat | grep $activeInter)
	echo $TMP1 | awk {'print $6'}
}

get_tx(){
	activeInter=$(ip addr | awk '/state UP/ {print $2}')
	activeInter=${activeInter%:*}
	TMP1=$(ifstat | grep $activeInter)
	echo $TMP1 | awk {'print $8'}
}

get_writes(){
	TMP1=$(iostat -m | grep "sda")
	echo $TMP1 | awk {'print $4'}
}

get_cap(){
	TMP1=$(df -m | grep "root")
	echo $TMP1 | awk {'print $4'}
}

#sys_metrics
#
#DESC: Collects system metrics and writes to csv
#
#ARGUMENTS:
# $1 Seconds
sys_metrics(){
	writeStat=$(get_writes)
	capStat=$(get_cap)
	txStat=$(get_tx)
	rxStat=$(get_rx)
	echo $1 "," $txStat "," $rxStat "," $writeStat "," $capStat "," >> "sda_metrics.csv"
}


#NAME:
#cleanup
#
#DESC:
#Cleans up metric processors
#
#ARGUMENTS:
# N/A
cleanup(){
    ifstat_killer
    prs_killer
}
#-----------------#

#----Startup----#
#Clears old Metric Files
echo "SECONDS, CPU%, MEM%" > "APM1_metrics.csv"
echo "SECONDS, CPU%, MEM%" > "APM2_metrics.csv"
echo "SECONDS, CPU%, MEM%" > "APM3_metrics.csv"
echo "SECONDS, CPU%, MEM%" > "APM4_metrics.csv"
echo "SECONDS, CPU%, MEM%" > "APM5_metrics.csv"
echo "SECONDS, CPU%, MEM%" > "APM6_metrics.csv"


#Clears any duplicate/old processes
cleanup

#Set ifstat sample time
ifstat -d 1
#ifstat -d $ISIN 2>&1
prs_spawner
#---------------#


printf "Type (q/Q) to exit program\n"
N=0
SEC=0
while true; do
    #Exit program loop
    read -t 1 -N 1 input
    if [[ $input = "q" ]] || [[ $input = "Q" ]] ; then
            printf "\nExiting program\n"
            break
    fi
    
    #Log info every 5 seconds
    if [ $N -eq 5 ] ; then
        prs_metrics "APM1" $SEC
        prs_metrics "APM2" $SEC
        prs_metrics "APM3" $SEC
        prs_metrics "APM4" $SEC
        prs_metrics "APM5" $SEC
        prs_metrics "APM6" $SEC
        sys_metrics $SEC
        N=0
    fi

    SEC=$(($SEC + 1))
    N=$(($N + 1))
    sleep 1
    
done

#------------------#


#----Cleanup----#
trap cleanup EXIT
#---------------#
